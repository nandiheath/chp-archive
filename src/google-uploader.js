const Promise = require('bluebird');
const request = Promise.promisifyAll(require('request'));

const { google } = require('googleapis');
const sheets = google.sheets('v4');
const ss = Promise.promisifyAll(sheets.spreadsheets.values);

const mkdirp = require('mkdirp');
const fs = require('fs');
const path = require('path');
const parse = require('csv-parse/lib/sync');
const moment = require('moment');

require('dotenv').config();

// TODO: should have a script to export the crentials from env vars to file?
const CREDENTIAL_JSON = process.env.CREDENTIAL_JSON
const GOOGLE_APPLICATION_CREDENTIALS = process.env.GOOGLE_APPLICATION_CREDENTIALS

mkdirp.sync(path.dirname(GOOGLE_APPLICATION_CREDENTIALS))
fs.writeFileSync(GOOGLE_APPLICATION_CREDENTIALS, CREDENTIAL_JSON)

async function createSheetIfNotExists(spreadsheetId, sheet) {
  const auth = new google.auth.GoogleAuth({
    // Scopes can be specified either as an array or as a single, space-delimited string.
    scopes: ['https://www.googleapis.com/auth/spreadsheets']
  });

  return new Promise((resolve, reject) => {
    sheets.spreadsheets.batchUpdate({
      auth,
      spreadsheetId: spreadsheetId,
      resource: {
        requests: [
          {
            'addSheet': {
              'properties': {
                'title': sheet,
              }
            }
          }
        ],
      }
    }, (err, res) => {
      if (err) {
        resolve(false);
      }
      // do not handle the error
      resolve(true);
    });
  })

}

async function readFromSpreadSheet(spreadsheetId, range) {
  // This method looks for the GCLOUD_PROJECT and GOOGLE_APPLICATION_CREDENTIALS
  // environment variables.
  const auth = new google.auth.GoogleAuth({
    // Scopes can be specified either as an array or as a single, space-delimited string.
    scopes: ['https://www.googleapis.com/auth/spreadsheets']
  });

  const req = {
    spreadsheetId,
    range,
    auth,
  };


  const data = await ss.getAsync(req);

  return data.data.values;
}

async function uploadToSpreadSheet(spreadsheetId, range, values) {
  const auth = new google.auth.GoogleAuth({
    // Scopes can be specified either as an array or as a single, space-delimited string.
    scopes: ['https://www.googleapis.com/auth/spreadsheets']
  });

  const data = [{
    range,
    values,
  }];
  // Additional ranges to update ...
  const resource = {
    data,
    valueInputOption: 'USER_ENTERED',
  };
  return ss.batchUpdateAsync({
    spreadsheetId,
    resource,
    auth,
  });
}

async function uploadCSV(filePath, options) {
  const { spreadsheetId, sheetName, columnMap, headers } = options
  const ssExists = await createSheetIfNotExists(spreadsheetId, sheetName);
  const spreadsheetRecords = [];

  const records = await readCSV(filePath);

  console.log(`CSV fetched. Total ${records.length} records.`)

  spreadsheetRecords.push(headers);

  if (columnMap) {
    records.forEach(r => {
      const record = new Array(columnMap[columnMap.length]);
      columnMap.forEach((to, from) => {
        record[to] = Object.values(r)[from];
      });
      spreadsheetRecords.push(record);
    });
  } else {
    records.forEach(r => {
      spreadsheetRecords.push(Object.values(r));
    })
  }




  const values = [['This spreadsheet is generated by bot.', `Last Updated at:${moment().tz("Asia/Hong_Kong").format('YYYY-MM-DD HH:mm:ss')}`], ...spreadsheetRecords]
  const result = await uploadToSpreadSheet(spreadsheetId, `${sheetName}!A1:ZZ`, values)
  console.log(`Total ${result.data.totalUpdatedRows} rows updated.`);
}

async function readCSV(csvPath) {
  let records = [];
  try {
    records = parse(fs.readFileSync(csvPath), {
      columns: true,
      skip_empty_lines: true,
    })
  } catch (error) {
    console.error('error when uploading csv.. ')
    console.error(error);
  }

  return records
}

module.exports = {
  uploadCSV,
}